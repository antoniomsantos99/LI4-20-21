@page "/classificacoesGerais"

@using LightsOut.Data
@inject PilotoService PilotoService

<div class="classificacoes">

    <div class="filtros">
        <div class="row">
            <button type="button" @onclick="PrevEpoca">&#8249</button>
            <p>Época @epocaPretendida</p>
            <button type="button" @onclick="ProxEpoca">&#8250</button>
        </div>

        <div class="row">
            <button type="button" @onclick="PrevProva">&#8249</button>
            <p>Prova @provaPretendida</p>
            <button type="button" @onclick="ProxProva">&#8250</button>
        </div>
    </div>

    <div class="leftTable">
        <h1>Classificação Geral Pilotos</h1>
        
        @for (int i = 0; i < total.Count; i++)
        {
            <div class="skillBox">
                <p>@(posicao+(i+1)) º @total[i].Item1</p>
                <p>@total[i].Item2</p>
                
                @switch (i)
                {
                    case 0:
                    {
                        <div class="skill">
                            <div class="skill_level" style="width: @(100 * total[i].Item2 / 500)%; background: gold; height: 10px;"></div>
                        </div>
                        break;
                    }
                        
                    case 1:
                    {
                        <div class="skill">
                            <div class="skill_level" style="width: @(100 * total[i].Item2 / 500)%; background: silver; height: 10px;"></div>
                        </div>
                        break;
                    }  
                        
                    case 2:
                    {
                        <div class="skill">
                            <div class="skill_level" style="width: @(100 * total[i].Item2 / 500)%; background: saddlebrown; height: 10px;"></div>
                        </div>
                        break;
                    }  
                    default:
                    {
                        <div class="skill">
                            <div class="skill_level" style="width: @(100 * total[i].Item2 / 500)%; background: deepskyblue; height: 10px;"></div>
                        </div>
                        break;
                    }  
                }
                
            </div>
        }
    </div>

    <div class="rightTable">
        <h1>Classificação Geral Equipas</h1>
        <div class="skillBox">
            <p>Mercedes-Benz</p>
            <p>89</p>
            <div class="skill">
                <div class="skill_level" style="width: 89%"></div>
            </div>
        </div>

        <div class="skillBox">
            <p>Red-Bull</p>
            <p>75</p>
            <div class="skill">
                <div class="skill_level" style="width: 75%"></div>
            </div>
        </div>

        <div class="skillBox">
            <p>McLaren</p>
            <p>40</p>
            <div class="skill">
                <div class="skill_level" style="width: 40%"></div>
            </div>
        </div>
    </div>
</div>

@code {
    private Resultado resultado = new Resultado();
    private List<Tuple<string, int>> total = new List<Tuple<string, int>>();
    private int provaPretendida = 1;
    private int epocaPretendida = 2019;
    private int posicao = 0;

    private void ProxProva()
    {
        if (provaPretendida < 22)
        {
            provaPretendida++;
            posicao = 0;
        }
    }

    private void PrevProva()
    {
        if (provaPretendida > 1)
        {
            provaPretendida--;
            posicao = 0;
        }
    }

    private void ProxEpoca()
    {
        if (epocaPretendida < 2021)
        {
            epocaPretendida++;
            provaPretendida = 1;
            posicao = 0;
        }
    }

    private void PrevEpoca()
    {
        if (epocaPretendida > 1999)
        {
            epocaPretendida--;
            provaPretendida = 1;
            posicao = 0;
        }
    }

     protected override async Task OnAfterRenderAsync(bool firstRender) {
    
        if (firstRender){
            total = await resultado.ClassificacoesGeraisPiloto(epocaPretendida, provaPretendida);
            StateHasChanged(); 
            //Console.WriteLine("sada");
        }
        else{
            total = await resultado.ClassificacoesGeraisPiloto(epocaPretendida, provaPretendida);
            StateHasChanged();
        }
    }
}