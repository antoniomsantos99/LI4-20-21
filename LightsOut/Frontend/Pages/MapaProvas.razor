@page "/mapaProvas"
@inject IJSRuntime JSRuntime
@using LightsOut.Data
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using Newtonsoft.Json

<div class="contentor">
    <div id='map' style="height: 100vh; width: 100%;"></div>
    <div class="filtros">
        <div class="row">
            <div class="row">
                <button type="button" @onclick="PrevDia">&#8249</button>
                <p>@(dia.ToString("dd/MM/yyyy"))</p>
                <button type="button" @onclick="ProxDia">&#8250</button>
            </div>
        </div>
    </div>
</div>


@code {
    private DateTime dia = DateTime.Parse("2019-03-14");
    private Prova prova = new Prova();
    private List<Prova> provas = new List<Prova>();
    private Localizacao local = new Localizacao();
    private List<Localizacao> localizacoes = new List<Localizacao>();
    private List<List<float>> locais = new List<List<float>>();

    private void ProxDia(){

        DateTime d = dia.AddDays(1);
        dia = d;
        base.StateHasChanged();
    }

    protected void PrevDia(){

        DateTime d = dia.AddDays(-1);
        dia = d;
        base.StateHasChanged();
        Console.WriteLine(dia);
    }

    protected List<List<float>> getCoord(List<Prova> provas){
        List<List<float>> result = new List<List<float>>();

        foreach (Prova prova in provas){
            List<float> coord = new List<float>();
            coord.Add(prova.localizacao.latitude);
            coord.Add(prova.localizacao.longitude);
            result.Add(coord);
        }
        
        return result;
    }
    
    protected List<string> getNomes(List<Prova> provas){
        List<string> result = new List<string>();

        foreach (Prova prova in provas){
            result.Add(prova.id);
        }
        
        return result;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender) {

        if (firstRender){
            
            string rondaText = dia.ToString("MM");
            int ronda = Int32.Parse(rondaText);
            provas = prova.ppppp(2019, ronda);
            
            /*
            localizacoes = prova.GetProvasIntervalo(2020, ronda);
            locais = getCoord(localizacoes);*/
            //await JSRuntime.InvokeVoidAsync("initialMap", null);
            
            List<string> res = new List<string>();
            foreach (var p in provas)
            {
                res.Add(JsonConvert.SerializeObject(p));
            }
            
            await JSRuntime.InvokeVoidAsync("loadMapScenario", res,dia);
            //StateHasChanged();
        }
        else{
            string rondaText = dia.ToString("MM");
            int ronda = Int32.Parse(rondaText);
            provas = prova.ppppp(2019, ronda);
            
            /*
            localizacoes = prova.GetProvasIntervalo(2020, ronda);
            locais = getCoord(localizacoes);*/
            //await JSRuntime.InvokeVoidAsync("initialMap", null);
            List<string> res = new List<string>();
            foreach (var p in provas)
            {
                res.Add(JsonConvert.SerializeObject(p));
            }
            
            await JSRuntime.InvokeVoidAsync("loadMapScenario", res,dia);
            //StateHasChanged();
        }
    }
}