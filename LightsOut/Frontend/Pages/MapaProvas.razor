@page "/mapaProvas"
@inject IJSRuntime JSRuntime
@using LightsOut.Data
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Threading
@using Microsoft.Extensions.WebEncoders.Testing
@using Newtonsoft.Json
@inject PageHistoryState PageHistoryState

<div class="contentor">
    
    <div id='map' style="height: 100vh; width: 100%;"></div>
    <div class="filtros">
        <div class="row">
            <div class="row">
                <button type="button" @onclick="PrevDiaInicial">&#8249</button>
                <p>Data Inicial: @(diaInicial.ToString("dd/MM/yyyy"))</p>
                <button type="button" @onclick="ProxDiaInicial">&#8250</button>
            </div>
        </div>
        <div class="row">
            <div class="row">
                <button type="button" @onclick="PrevDiaFinal">&#8249</button>
                <p>Data Final: @(diaFinal.ToString("dd/MM/yyyy"))</p>
                <button type="button" @onclick="ProxDiaFinal">&#8250</button>
            </div>
        </div>
        <div class="row">
            <div class="row">
                <button type="button" @onclick="DecrementRange">&#8249</button>
                <p>Range: @range</p>
                <button type="button" @onclick="IncrementRange">&#8250</button>
            </div>
        </div>
    </div>
</div>


@code {
    //private DateTime dia = DateTime.Parse("2019-03-14");
    private DateTime diaInicial = DateTime.Now;
    private DateTime diaFinal = DateTime.Now;
    private int range = 1;
    private Prova prova = new Prova();
    private List<Prova> provas = new List<Prova>();
    private Localizacao local = new Localizacao();
    private List<Localizacao> localizacoes = new List<Localizacao>();
    private List<List<float>> locais = new List<List<float>>();
    private String time;

    
    private void IncrementRange(){
        int i = range+1;
        range = i;
    }

    private void DecrementRange(){
        if (range > 1){
            int i = range-1;
            range = i;
        }
    }

    private void ProxDiaInicial(){
        DateTime d = diaInicial.AddDays(range);
        if (d <= diaFinal){
            diaInicial = d;
            base.StateHasChanged();
        }else{
            diaInicial = diaFinal;
            base.StateHasChanged();
        }
    }

    private void ProxDiaFinal(){
        DateTime d = diaFinal.AddDays(range);
        diaFinal = d;
        base.StateHasChanged();
    }


    protected void PrevDiaInicial(){
        DateTime d = diaInicial.AddDays(-range);
        diaInicial = d;
        base.StateHasChanged();
    }

    protected void PrevDiaFinal(){
        DateTime d = diaFinal.AddDays(-range);
        if (d >= diaInicial){
            diaFinal = d;
            base.StateHasChanged();
        }
        else{
            diaFinal = diaInicial;
            base.StateHasChanged();
        }
    }

    protected List<List<float>> getCoord(List<Prova> provas){
        List<List<float>> result = new List<List<float>>();

        foreach (Prova prova in provas){
            List<float> coord = new List<float>();
            coord.Add(prova.localizacao.latitude);
            coord.Add(prova.localizacao.longitude);
            result.Add(coord);
        }
        
        return result;
    }
    
    protected List<string> getNomes(List<Prova> provas){
        List<string> result = new List<string>();

        foreach (Prova prova in provas){
            result.Add(prova.id);
        }
        
        return result;
    }
    /*
    private async void Teste()
    {
        provas = prova.localizacaoProvasIntervalo(diaInicial.ToString("yyyy-MM-dd"), diaFinal.ToString("yyyy-MM-dd"));
        List<string> res = new List<string>();
            
        foreach(var p in provas){
            res.Add(JsonConvert.SerializeObject(p));
        }

        await JSRuntime.InvokeVoidAsync("loadMapScenario", res);
    }*/
    protected override async Task OnAfterRenderAsync(bool firstRender) {

        if (firstRender){
            
            /*
            string rondaText = diaFinal.ToString("MM");
            int ronda = Int32.Parse(rondaText);
            provas = prova.ppppp(2019, ronda);
            
            
            List<string> res = new List<string>();
            foreach (var p in provas)
            {
                res.Add(JsonConvert.SerializeObject(p));
            }
            
            await JSRuntime.InvokeVoidAsync("loadMapScenario", res,diaFinal);
            //StateHasChanged();
            */

            provas = prova.localizacaoProvasIntervalo(diaInicial.ToString("yyyy-MM-dd"), diaFinal.ToString("yyyy-MM-dd"));
            List<string> res = new List<string>();
            
            foreach(var p in provas){
                res.Add(JsonConvert.SerializeObject(p));
            }

            await JSRuntime.InvokeVoidAsync("loadMapScenario", res);
            TimerService.UpdateEvent += async date =>
            {
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };
        }
        else{
            /*
            string rondaText = diaFinal.ToString("MM");
            int ronda = Int32.Parse(rondaText);
            provas = prova.ppppp(2019, ronda);
           
            List<string> res = new List<string>();
            foreach (var p in provas)
            {
                res.Add(JsonConvert.SerializeObject(p));
            }
            
            await JSRuntime.InvokeVoidAsync("loadMapScenario", res,diaFinal);
            //StateHasChanged();
            */
            provas = prova.localizacaoProvasIntervalo(diaInicial.ToString("yyyy-MM-dd"), diaFinal.ToString("yyyy-MM-dd"));
            List<string> res = new List<string>();
            
            foreach(var p in provas){
                res.Add(JsonConvert.SerializeObject(p));
            }

            await JSRuntime.InvokeVoidAsync("loadMapScenario", res);
            
            TimerService.UpdateEvent += async date =>
            {
                await InvokeAsync(() =>
                {
                    time += date;
                    StateHasChanged();
                });
            };

        }
        
        PageHistoryState.AddPageToHistory("/mapaProvas");
    }
}